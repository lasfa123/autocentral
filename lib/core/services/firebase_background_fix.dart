// lib/core/services/firebase_background_service.dart
// Service pour g√©rer Firebase en arri√®re-plan

import 'dart:async';
import 'package:autocentral/core/services/sync_service.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'vehicle_service.dart';
import '../models/vehicle.dart';

class FirebaseBackgroundService {
  static StreamSubscription<User?>? _authSubscription;
  static StreamSubscription<List<CarModel>>? _vehiclesSubscription;
  static bool _isListening = false;
  
  /// D√©marre l'√©coute des changements Firebase
  static Future<void> startListening() async {
    if (_isListening) return;
    
    debugPrint('üî• D√©marrage des listeners Firebase');
    
    // √âcouter les changements d'authentification
    _authSubscription = FirebaseAuth.instance.authStateChanges().listen(
      (User? user) {
        debugPrint('üîê Auth state changed: ${user?.uid}');
        if (user != null) {
          _startVehicleListening();
        } else {
          _stopVehicleListening();
        }
      },
      onError: (error) {
        debugPrint('‚ùå Erreur auth listener: $error');
        _reconnectAuth();
      },
    );
    
    _isListening = true;
  }
  
  /// Arr√™te l'√©coute des changements Firebase
  static Future<void> stopListening() async {
    debugPrint('üî• Arr√™t des listeners Firebase');
    
    await _authSubscription?.cancel();
    await _vehiclesSubscription?.cancel();
    
    _authSubscription = null;
    _vehiclesSubscription = null;
    _isListening = false;
  }
  
  /// D√©marre l'√©coute des v√©hicules
  static void _startVehicleListening() {
    debugPrint('üöó D√©marrage listener v√©hicules');
    
    _vehiclesSubscription = VehicleService.getUserVehicles().listen(
      (List<CarModel> vehicles) {
        debugPrint('üöó V√©hicules mis √† jour: ${vehicles.length}');
        // Ici vous pouvez notifier vos widgets via Provider/Bloc
        _notifyVehiclesUpdated(vehicles);
      },
      onError: (error) {
        debugPrint('‚ùå Erreur vehicles listener: $error');
        _reconnectVehicles();
      },
    );
  }
  
  /// Arr√™te l'√©coute des v√©hicules
  static void _stopVehicleListening() {
    _vehiclesSubscription?.cancel();
    _vehiclesSubscription = null;
  }
  
  /// Reconnecte le listener auth en cas d'erreur
  static void _reconnectAuth() {
    Timer(const Duration(seconds: 3), () {
      if (_isListening) {
        debugPrint('üîÑ Reconnexion auth listener...');
        _authSubscription?.cancel();
        startListening();
      }
    });
  }
  
  /// Reconnecte le listener v√©hicules en cas d'erreur
  static void _reconnectVehicles() {
    Timer(const Duration(seconds: 3), () {
      if (_isListening && FirebaseAuth.instance.currentUser != null) {
        debugPrint('üîÑ Reconnexion vehicles listener...');
        _stopVehicleListening();
        _startVehicleListening();
      }
    });
  }
  
  /// Notifie les widgets des changements de v√©hicules
  static void _notifyVehiclesUpdated(List<CarModel> vehicles) {
    // Si vous utilisez Provider, notifiez ici
    // Provider.of<VehicleProvider>(context, listen: false).updateVehicles(vehicles);
    
    // Si vous utilisez un GlobalKey ou callback
    // VehicleNotifier.instance.notifyListeners();
  }
  
  /// V√©rifie et r√©pare la connexion Firebase
  static Future<void> checkAndRepairConnection() async {
    try {
      debugPrint('üîç V√©rification connexion Firebase...');
      
      // Test connexion Firestore
      await FirebaseFirestore.instance.runTransaction((transaction) async {
        // Transaction vide juste pour tester la connexion
      });
      
      // Test connexion Auth
      await FirebaseAuth.instance.currentUser?.reload();
      
      debugPrint('‚úÖ Connexion Firebase OK');
      
      // Red√©marrer les listeners si n√©cessaire
      if (!_isListening) {
        await startListening();
      }
      
    } catch (e) {
      debugPrint('‚ùå Probl√®me connexion Firebase: $e');
      
      // Tenter de r√©parer
      await _repairConnection();
    }
  }
  
  /// R√©pare la connexion Firebase
  static Future<void> _repairConnection() async {
    debugPrint('üîß Tentative de r√©paration connexion Firebase...');
    
    try {
      // Arr√™ter tous les listeners
      await stopListening();
      
      // Attendre un peu
      await Future.delayed(const Duration(seconds: 2));
      
      // Red√©marrer les listeners
      await startListening();
      
      debugPrint('‚úÖ Connexion Firebase r√©par√©e');
      
    } catch (e) {
      debugPrint('‚ùå √âchec r√©paration Firebase: $e');
    }
  }
  
  /// M√©thode √† appeler quand l'app revient du background
  static Future<void> onAppResumed() async {
    debugPrint('üü¢ App revenue du background - V√©rification Firebase');
    
    // V√©rifier et r√©parer la connexion
    await checkAndRepairConnection();
    
    // Force un refresh des donn√©es
    if (FirebaseAuth.instance.currentUser != null) {
      try {
        // Trigger un nouveau fetch des v√©hicules
        final vehicles = await VehicleService.getUserVehiclesList();
        _notifyVehiclesUpdated(vehicles);
      } catch (e) {
        debugPrint('‚ùå Erreur refresh v√©hicules: $e');
      }
    }
  }
  
  /// M√©thode √† appeler quand l'app va en background
  static Future<void> onAppPaused() async {
    debugPrint('üü° App en background - Sauvegarde √©tat Firebase');
    
    // Optionnel : persister l'√©tat actuel
    try {
      if (FirebaseAuth.instance.currentUser != null) {
        // Sauvegarder les donn√©es importantes
        await SyncService.forceSync();
      }
    } catch (e) {
      debugPrint('‚ùå Erreur sauvegarde background: $e');
    }
  }
  
  /// Obtient l'√©tat des listeners
  static Map<String, dynamic> getStatus() {
    return {
      'isListening': _isListening,
      'authSubscription': _authSubscription != null,
      'vehiclesSubscription': _vehiclesSubscription != null,
      'currentUser': FirebaseAuth.instance.currentUser?.uid,
    };
  }
}

// Extension pour votre main.dart
extension AppLifecycleHandler on State {
  void handleAppLifecycle(AppLifecycleState state) {
    switch (state) {
      case AppLifecycleState.resumed:
        FirebaseBackgroundService.onAppResumed();
        break;
      case AppLifecycleState.paused:
        FirebaseBackgroundService.onAppPaused();
        break;
      case AppLifecycleState.detached:
        FirebaseBackgroundService.stopListening();
        break;
      default:
        break;
    }
  }
}